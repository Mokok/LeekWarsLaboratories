include("Functions");

function fire_weapon(weapon_to_fire){
	initWeapon(weapon_to_fire);
	var result_assault;
	do {
		result_assault=useWeapon(getNearestEnemy());
	}while (result_assault == USE_SUCCESS);
}

function fire_chip(chip_to_fire){
	var result;
	do {
		result=useChip(chip_to_fire, getNearestEnemy());
	}while (result == USE_SUCCESS);
}

function taunt(){
	if(getLife(getNearestEnemy()) < 40 && getLife() > 40){
		say("Tu ne le sais pas encore mais tu vas finir dans le grand pot au feu !");
		say("ATATATTATATATATTATATATATATATATATTATA");
		say("ATOUUUUUUUUUUUUUUUUUUUUUUUUUUUU");
	}
}

function choose_assault(assault_list){
	var better_assault_choice;
	var bigger_assault_damage=0;
	var sub_routine;
	if(isWeapon(assault_list[0])){
		sub_routine = sub_routine_better_attaque_option;
	}
	if(isChip(assault_list[0])){
		sub_routine = sub_routine_better_attaque_option_chip;
	}
	for (var weapon in assault_list) {
		if(sub_routine(weapon)){
			if(evaluate_damage(weapon) > bigger_assault_damage){
				bigger_assault_damage = evaluate_damage(weapon);
				better_assault_choice = weapon;
			}
		}
	}
	return better_assault_choice;
}

function better_attaque_option(weapons,chips){
	var better_weapon_choice; 
	if(weapons[0]!=null){
		better_weapon_choice = choose_assault(weapons);
	}
	var better_chip_choice;
	if(chips[0]!=null){
		better_chip_choice = choose_assault(chips);
	}
	if(better_chip_choice!=null and better_weapon_choice!= null){
		if(evaluate_damage(better_chip_choice) > evaluate_damage(better_weapon_choice)){	
			return better_chip_choice;
		}
	}
	else{
		return better_weapon_choice;
	}
}

function evaluate_damage(assault_to_analyse){
	var get_effects = getWeaponEffects;
	if(isChip(assault_to_analyse)){get_effects = getChipEffects;}
	var weapon_damage = get_effects(assault_to_analyse)[0][EFFECT_DAMAGE];
	return weapon_damage * (1 + getForce() / 100);
}

function isWeaponEquiped(weapon_to_check){
	if(getWeapon()==weapon_to_check)
		return 0;
	else
		return 1;
}

function sub_routine_better_attaque_option(weapon_to_handle){
	if(canUseWeapon(weapon_to_handle, getNearestEnemy())
		&& getTP()> (getWeaponCost(weapon_to_handle) 
			+ isWeaponEquiped(weapon_to_handle))){
		return true;
	}
	return false;
}

function sub_routine_better_attaque_option_chip(chip_to_handle){
	if(canUseChip(chip_to_handle, getNearestEnemy())
		&& getTP()>getChipCost(chip_to_handle)){
		return true;
	}
	return false;
}
function build_offensive_chip_array(){
	var chips = getChips();
	var offensive_chips = [];
	var nb_offensive_chips = 0;
	for(var chip in chips){
		var chip_effects = getChipEffects(chip);
		for(var effect in chip_effects){
			if(effect[0]==EFFECT_DAMAGE){
				offensive_chips[nb_offensive_chips] = chip;
				nb_offensive_chips++;
			}
		}
	}
	return offensive_chips;
}

function handle_pre_attaque(weapons, offensive_chips){
	return better_attaque_option(weapons,offensive_chips);
}
function use_assault(assault_to_use){
	var assault_function = isChip(assault_to_use) ? useChip : useWeapon;
	assault_function(assault_to_use, getNearestEnemy());
}
function handle_attaque(){
	var assault_to_use = better_attaque_option(getWeapons(),build_offensive_chip_array());
	if(assault_to_use!=null){
		use_assault(assault_to_use);
	}
}
