/**
* Utilise une arme jusqu'à epuisement des PT
**/
function useWeaponMax(enemies){
	var enemy;
	if(typeOf(enemies)==TYPE_ARRAY){
		enemy=enemies[0];
		//On recupere l'enemi le plus faible
		for (var temp in enemies){
			if(canUseWeapon(temp) and getLife(temp)<getLife(enemy)){
				enemy=temp;
			}
		}
	}
	else{
		enemy=enemies;
	}
		//On utilise tous nos tp sur l'ennemi le plus faible
		var TP=getTP();
		var cost=getWeaponCost(getWeapon());
		for (var i=0;i<TP/cost;i++){
			useWeapon(enemy);
		}	
}

function useWeaponOnCellMax(cell){
	//On utilise tous nos tp sur l'ennemi le plus faible
	var TP=getTP();
	var cost=getWeaponCost(getWeapon());
	for (var i=0;i<TP/cost;i++){
		useWeaponOnCell(cell);
	}
	
}

function useChipOnCellMax(chip,cell){
	//On utilise tous nos tp sur l'ennemi le plus faible
	var TP=getTP();
	var cost=getChipCost(chip);
	for (var i=0;i<TP/cost;i++){
		useChipOnCell(chip, cell);
	}
	
}

/**
* Utilise une chip jusqu'à epuisement des PT
**/
function useChipMax(chip,enemies){
	var enemy;
	if(typeOf(enemies)==TYPE_ARRAY){
		enemy=enemies[0];
		//On recupere l'enemi le plus faible
		for (var temp in enemies){
			if(canUseWeapon(temp) and getLife(temp)<getLife(enemy)){
				enemy=temp;
			}
		}
	}
	else{
		enemy=enemies;
	}
		//On utilise tous nos tp sur l'enmi le plus faible
		var TP=getTP();
		var cost=getChipCost(chip);
		for (var i=0;i<TP/cost;i++){
			useChip(chip, enemy);
		}	
}
/**
* renvoie l'allie à qui il manque le plus de points de vie
**/
function getLowestLifeAlly(allies){
	var result=allies[0];
	for (var ally in allies){
		var ratioResult=getLife(result)/getTotalLife(result);
		var ratioCurrent=getLife(ally)/getTotalLife(ally);
		if(ratioCurrent<ratioResult){
			result=ally;
		}
	}
	return result;
}
/**
* Renvoie l'allié qui à la plus grande force
**/
function getStrongestAlly(allies){
	var result=allies[0];
	for (var ally in allies){
		if(getForce(ally)>getForce(result)){
			result=ally;
		}
	}
	return result;
}
/**
* Revoie l'ennemi qui a le plus d'agilité
**/
function getSupportEnnemy(enemies){
	var result=enemies[0];
	for (var enemy in enemies){
		if(getAgility(enemy)>getAgility(result)){
			result=enemy;
		}
	}
	return result;
}
//Change d'arme si elle n'est pas deja equipé
function setWeaponMax(weapon){
	if (getWeapon()!=weapon){
		setWeapon(weapon);
	}
}
//Heal si il manque de la vie seulement
function heal(chip,leek){
	if (getLife(leek)<getTotalLife(leek)){
		useChip(chip, leek);
	}
}
//Deplace le poireau au milieu des allies
//Voir si getAllies() renvoie aussi les allies mort
function moveInMiddleOfAllies(allies){
	var resultX=0;
	var resultY=0;
	var dividende =0;
	var alliesCount=getAlliesCount();
	for (var i=0;i<alliesCount;i++){
		if(isAlive(allies[i])){
			if(allies[i]!=getLeek() and getName(allies[i])!='Seiko'){

				resultX = resultX + getCellX(getCell(allies[i]));
				resultY = resultY + getCellY(getCell(allies[i]));
				dividende++;
				if(allies[i]==getStrongestAlly(allies) or allies[i]==getLowestLifeAlly(allies)){
					resultX = resultX + getCellX(getCell(allies[i]));
					resultY = resultY + getCellY(getCell(allies[i]));
					dividende++;
				}
			}
		}
	}
	resultX = floor(resultX/dividende);
	resultY = floor(resultY/dividende);
	var cellResult=getCellFromXY(resultX, resultY);
	moveTowardCell(cellResult);
}


//move jusqu'a que la ditance entre leek et le poireau soit de distanceCible
function move(leek,distanceCible){
	var i=0;
	var currentDistance= getPathLength(getCell(leek), getCell(getLeek()));
	if(currentDistance<=distanceCible){
		while (currentDistance<distanceCible and i<=getMP()+1){
			moveAwayFrom(leek, 1);
			currentDistance= getPathLength(getCell(leek), getCell(getLeek()));
			i++;
		}
	}
	else{
		while (currentDistance>distanceCible and i<=getMP()+1){
			moveToward(leek, 1);
			currentDistance= getPathLength(getCell(leek), getCell(getLeek()));
			i++;
		}
	}
}
function getNombreEnnemiTouche(weapon,cell){
	var result=0;
	var array;
	if(isChip(weapon)){
		array=getChipTargets(weapon, cell);
	}
	else{
		array=getWeaponTargets(weapon, cell);
	}
	for (var leek in array){
		if(isEnemy(leek)){
			result++;
		}
	}	
	return result;
}

function getNombreAllieTouche(weapon,cell){
	var result=0;
	var array;
		if(isChip(weapon)){
		array=getChipTargets(weapon, cell);
	}
	else{
		array=getWeaponTargets(weapon, cell);
	}
	for (var leek in array){
		if(isAlly(leek)){
			result++;
		}
	}	
	return result;
}



function getCellToUseAreaWeapon(weapon,enemy){
	var array = getCellsWhereWeaponHit(weapon,enemy);
	var nbHittenEnemies=0;
	var result;
	for (var i=0;i<count(array);i++){
		if(isChip(weapon)){
			if(canUseChipOnCell(weapon, array[i])){
					if(getNombreEnnemiTouche(weapon,array[i])>nbHittenEnemies){
						if(getNombreAllieTouche(weapon,array[i])<=0){
							nbHittenEnemies=getNombreEnnemiTouche(weapon,array[i]);
							result=array[i];
						}
					}
			}
		}
		else{
			if(canUseWeaponOnCell(weapon, array[i])){
				if(getNombreEnnemiTouche(weapon,array[i])>nbHittenEnemies){
					if(getNombreAllieTouche(weapon,array[i])<=0){
						nbHittenEnemies=getNombreEnnemiTouche(weapon,array[i]);
						result=array[i];
					}
				}
			}
		}
	}
	return result;
}
//renvoie un tableau de cellules sur lesquelles l'ennemi 
//est touche si on tire avec le lance grenades
/*function getCellsWhereLauncherHit(enemy){
		var cellCible = getCell(enemy);
		var x=getCellX(cellCible);
		var y=getCellY(cellCible);
		var result=[];
		result[0]=cellCible;
		result[1]=getCellFromXY(x-1, y-1);
		result[2]=getCellFromXY(x-1, y);
		result[3]=getCellFromXY(x-1, y+1);
		result[4]=getCellFromXY(x, y+1);
		result[5]=getCellFromXY(x, y-1);
		result[6]=getCellFromXY(x+1, y-1);
		result[7]=getCellFromXY(x+1, y);
		result[8]=getCellFromXY(x+1, y+1);
		result[9]=getCellFromXY(x+2, y);
		result[10]=getCellFromXY(x-2, y);
		result[11]=getCellFromXY(x, y+2);
		result[12]=getCellFromXY(x, y-2);
		return result;	
}
*/
//renvoie un tableau de cellules sur lesquelles l'ennemi 
//est touche si on tire avec weapon
function getCellsWhereWeaponHit(weapon,enemy){
		var cellCible = getCell(enemy);
		var area;
		if(isChip(weapon)){
			area=getChipArea(weapon);
		}
		else{
			area=getWeaponArea(weapon);
		}
		var x=getCellX(cellCible);
		var y=getCellY(cellCible);
		var result=[];
		result[0]=cellCible;
		if(area==AREA_CIRCLE_1 or area==AREA_CIRCLE_2){
			result[1]=getCellFromXY(x-1, y);
			result[2]=getCellFromXY(x+1, y);
			result[3]=getCellFromXY(x, y-1);
			result[4]=getCellFromXY(x, y+1);
		}
		if(area==AREA_CIRCLE_2){
			result[5]=getCellFromXY(x-1, y-1);
			result[6]=getCellFromXY(x-1, y+1);
			result[7]=getCellFromXY(x+1, y-1);
			result[8]=getCellFromXY(x+1, y+1);
			result[9]=getCellFromXY(x+2, y);
			result[10]=getCellFromXY(x-2, y);
			result[11]=getCellFromXY(x, y+2);
			result[12]=getCellFromXY(x, y-2);
		}

		return result;	
}
//Retourne true si l'on peut utiliser l'arme meme apres en avoir change
function canUseWeaponMax(weapon,cell){
	if(getWeapon()!=weapon){
		if(getTP()>getWeaponCost(weapon)){
			return canUseWeaponOnCell(weapon, cell);
		}
	}
	else{
		return (canUseWeaponOnCell(weapon, cell) 
		and getTP()>=getWeaponCost(weapon));
	}
	
}


function attaquer(){
	if(canUseChip(CHIP_STALACTITE, getNearestEnemy())){
		useChip(CHIP_STALACTITE,getNearestEnemy());
	}
	var cellCible = getCellToUseAreaWeapon(WEAPON_GRENADE_LAUNCHER,getNearestEnemy());
	if(cellCible!=null and getDistance(getCell(), getCell(getNearestEnemy()))!=1){
		if(canUseWeaponMax(WEAPON_GRENADE_LAUNCHER,cellCible)){
			setWeaponMax(WEAPON_GRENADE_LAUNCHER);
			useWeaponOnCellMax(cellCible);
		}
	}
	else{
		if(canUseWeapon(WEAPON_MAGNUM, getNearestEnemy())){
			setWeaponMax(WEAPON_MAGNUM);
			useWeaponMax(getNearestEnemy());
		}
	}
}
//Renvoie les degats causes par weapon si shooter vise target
function getDamageWeapon(weapon,shooter,target){
	var bouclierA=getAbsoluteShield(target);
	var bouclierR=getRelativeShield(target);
	var damage=getWeaponEffects(weapon)[0][1]* (1+getForce(shooter)/100);
	var result=round(damage*(1-bouclierR/100)-bouclierA);
	return result;
}
//Renvoie les degats causes par chip si shooter vise target
function getDamageChip(chip,shooter,target){
	var bouclierA=getAbsoluteShield(target);
	var bouclierR=getRelativeShield(target);
	var damage=getChipEffects(chip)[0][1]* (1+getForce(shooter)/100);
	var result=round(damage*(1-bouclierR/100)-bouclierA);
	return result;
}
//Renvoie la chip qui fait le plus de degats du poireau leek
function getChipOffensive(leek){
	var allChips=getChips(leek);
	var maxDamage=0;
	var chipResult;
	for(var aChip in allChips){
		var effect=getChipEffects(aChip)[0];
		if(effect[0]==EFFECT_DAMAGE){
			if(effect[1]>maxDamage){
				maxDamage=effect[1];
				chipResult=aChip;
			}
		}
	}
	return chipResult;
}

function getPossibleTakenDamage(shooter,target){
	var chipOffensive=getChipOffensive(shooter);
	var weaponShooter=getWeapon(shooter);
	var damageTakenChip=0;
	var damageTakenWeapon=0;
	if(chipOffensive!=null){
		damageTakenChip=getDamageChip(chipOffensive,shooter,target);	
	}
	if(weaponShooter!=null){
		damageTakenWeapon=getDamageWeapon(getWeapon(shooter),shooter,target);
	}
	return max(damageTakenWeapon, damageTakenChip);
}
