/**
* Utilise une arme jusqu'à epuisement des PT
**/
function useWeaponMax(enemies){
	var enemy=enemies[0];
	//On recupere l'enemi le plus faible
	for (var temp in enemies){
		if(canUseWeapon(temp) and getLife(temp)<getLife(enemy)){
			enemy=temp;
		}
	}
	//On utilise tous nos tp sur l'ennemi le plus faible
	var TP=getTP();
	var cost=getWeaponCost(getWeapon());
	for (var i=0;i<TP/cost;i++){
		useWeapon(enemy);
	}
	
}

/**
* Utilise une chip jusqu'à epuisement des PT
**/
function useChipMax(chip,enemies){
	var enemy=enemies[0];
	//On recupere l'enemi le plus faible
	for (var temp in enemies){
		if(canUseWeapon(temp) and getLife(temp)<getLife(enemy)){
			enemy=temp;
		}
	}
	//On utilise tous nos tp sur l'enmi le plus faible
	var TP=getTP();
	var cost=getChipCost(chip);
	for (var i=0;i<TP/cost;i++){
		useChip(chip, enemy);
	}
	
}
/**
* renvoie l'allie à qui il manque le plus de points de vie
**/
function getLowestLifeAlly(allies){
	var result=allies[0];
	for (var ally in allies){
		var ratioResult=getLife(result)/getTotalLife(result);
		var ratioCurrent=getLife(ally)/getTotalLife(ally);
		if(ratioCurrent<ratioResult){
			result=ally;
		}
	}
	return result;
}
/**
* Renvoie l'allié qui à la plus grande force
**/
function getStrongestAlly(allies){
	var result=allies[0];
	for (var ally in allies){
		if(getForce(ally)>getForce(result)){
			result=ally;
		}
	}
	return result;
}
/**
* Revoie l'ennemi qui a le plus d'agilité
**/
function getSupportEnnemy(enemies){
	var result=enemies[0];
	for (var enemy in enemies){
		if(getAgility(enemy)>getAgility(result)){
			result=enemy;
		}
	}
	return result;
}
//Change d'arme si elle n'est pas deja equipé
function setWeaponMax(weapon){
	if (getWeapon()!=weapon){
		setWeapon(weapon);
	}
}
//Heal si il manque de la vie seulement
function heal(chip,leek){
	if (getLife(leek)<getTotalLife(leek)){
		useChip(chip, leek);
	}
}
//Deplace le poireau au milieu des allies
//Voir si getAllies() renvoie aussi les allies mort
function moveInMiddleOfAllies(allies){
	var resultX=0;
	var resultY=0;
	var alliesCount=getAlliesCount();
	for (var i=0;i<alliesCount;i++){
		resultX = resultX + getCellX(getCell(allies[i]));
		resultY = resultY + getCellY(getCell(allies[i]));
	}
	resultX = floor(resultX/alliesCount);
	resultY = floor(resultY/alliesCount);

	var cellResult=getCellFromXY(resultX, resultY);
	moveTowardCell(getCaseNonObstacle(cellResult));
}
//Renvoie la case vide la plus proche de cell
function getCaseNonObstacle(cell){
	var result=cell;
	var pas=1;
	var x=getCellX(cell);
	var y=getCellY(cell);
	while(!isEmptyCell(result)){
		if(isEmptyCell(getCellFromXY(x+pas, y+pas))){
			result = getCellFromXY(x+pas, y+pas);
		}
		if(isEmptyCell(getCellFromXY(x+pas, y))){
			result = getCellFromXY(x+pas, y);
		}
		if(isEmptyCell(getCellFromXY(x+pas, y-pas))){
			result = getCellFromXY(x+pas, y-pas);
		}
		if(isEmptyCell(getCellFromXY(x, y+pas))){
			result = getCellFromXY(x, y+pas);
		}
		if(isEmptyCell(getCellFromXY(x, y-pas))){
			result = getCellFromXY(x, y-pas);
		}
		if(isEmptyCell(getCellFromXY(x-pas, y+pas))){
			result = getCellFromXY(x-pas, y+pas);
		}
		if(isEmptyCell(getCellFromXY(x-pas, y))){
			result = getCellFromXY(x-pas, y);
		}
		if(isEmptyCell(getCellFromXY(x-pas, y-pas))){
			result = getCellFromXY(x-pas, y-pas);
		}
	pas++;
	}
	return result;	
}
